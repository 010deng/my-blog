{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{346:function(s,t,r){\"use strict\";r.r(t);var v=r(0),_=Object(v.a)({},(function(){var s=this,t=s.$createElement,r=s._self._c||t;return r(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":s.$parent.slotKey}},[r(\"h2\",{attrs:{id:\"script标签插入代码三种方式的区别\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#script标签插入代码三种方式的区别\"}},[s._v(\"#\")]),s._v(\" script标签插入代码三种方式的区别\")]),s._v(\" \"),r(\"ul\",[r(\"li\",[r(\"p\",[s._v(\"最原始插入\"),r(\"code\",[s._v(\"script\")]),s._v(\"标签的方式：HTML解析过程中如果遇到了\"),r(\"code\",[s._v(\"script\")]),s._v(\" 标签，将会中断解析HTML，转来解析js代码，加载完后直接执行。当js代码执行完后，才会继续解析HTML\")])]),s._v(\" \"),r(\"li\",[r(\"p\",[s._v(\"使用\"),r(\"code\",[s._v(\"defer\")]),s._v(\"这是js加载的异步解决方案，在碰到script标签时，将不会中断HTML的解析，而是并行加载js，但是js执行将在HTML解析完之后。\")])]),s._v(\" \"),r(\"li\",[r(\"p\",[s._v(\"使用\"),r(\"code\",[s._v(\"async\")]),s._v(\"，同样碰到script标签时不会中断HTML的解析，但是js加载完毕后将直接执行，这段时间HTML将会停止解析，直到js执行完毕，才会继续之前的解析操作。\")])])]),s._v(\" \"),r(\"h2\",{attrs:{id:\"浏览器渲染工作流程\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#浏览器渲染工作流程\"}},[s._v(\"#\")]),s._v(\" 浏览器渲染工作流程\")]),s._v(\" \"),r(\"ul\",[r(\"li\",[s._v(\"浏览器工作流程：构建DOM -> 构建CSSOM -> 构建渲染树 -> 布局 -> 绘制。\")]),s._v(\" \"),r(\"li\",[s._v(\"CSSOM会阻塞渲染，只有当CSSOM构建完毕后才会进入下一个阶段构建渲染树。\")]),s._v(\" \"),r(\"li\",[s._v(\"通常情况下DOM和CSSOM是并行构建的，但是当浏览器遇到一个不带defer或async属性的script标签时，DOM构建将暂停，如果此时又恰巧浏览器尚未完成CSSOM的下载和构建，由于JavaScript可以修改CSSOM，所以需要等CSSOM构建完毕后再执行JS，最后才重新DOM构建。\")]),s._v(\" \"),r(\"li\",[s._v(\"另外，所谓回流与重绘是程序员改动css样式时，浏览器做出的更新。\\n\"),r(\"ul\",[r(\"li\",[s._v(\"当我们对 DOM 的修改引发了 DOM 几何尺寸的变化（比如修改元素的宽、高或隐藏元素等）时，浏览器需要重新计算元素的几何属性（其他元素的几何属性和位置也会因此受到影响），然后再将计算的结果绘制出来。这个过程就是回流（也叫重排）\")]),s._v(\" \"),r(\"li\",[s._v(\"当我们对 DOM 的修改导致了样式的变化、却并未影响其几何属性（比如修改了颜色或背景色）时，浏览器不需重新计算元素的几何属性、直接为该元素绘制新的样式（跳过了上图所示的回流环节）。\")])])])])])}),[],!1,null,null,null);t.default=_.exports}}]);","extractedComments":[]}