{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{343:function(e,t,v){\"use strict\";v.r(t);var _=v(0),i=Object(_.a)({},(function(){var e=this,t=e.$createElement,v=e._self._c||t;return v(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":e.$parent.slotKey}},[v(\"p\",[e._v(\"浏览器的缓存机制大致可以分为以下两点\")]),e._v(\" \"),v(\"h2\",{attrs:{id:\"强缓存\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#强缓存\"}},[e._v(\"#\")]),e._v(\" 强缓存\")]),e._v(\" \"),v(\"p\",[e._v(\"其实强缓存非常常见，咱们平时经常见到的刷新0ms就获得数据的，全都是强缓存\\n它的代表字段有：\")]),e._v(\" \"),v(\"ul\",[v(\"li\",[e._v(\"Expires\")]),e._v(\" \"),v(\"li\",[e._v(\"Cache-Control（有许多指令，这里就不再展开了，但主要目的都是说明它的过期时间）\")])]),e._v(\" \"),v(\"blockquote\",[v(\"p\",[e._v(\"在没有过期的时候，所有请求不走后台，直接返回200\")])]),e._v(\" \"),v(\"h2\",{attrs:{id:\"协商缓存\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#协商缓存\"}},[e._v(\"#\")]),e._v(\" 协商缓存\")]),e._v(\" \"),v(\"p\",[e._v(\"而协商缓存就不像强缓存那么强制，它是在强缓存过期之后对服务端发起请求来验证更新\\n代表字段有：\")]),e._v(\" \"),v(\"ul\",[v(\"li\",[e._v(\"Last-Modified 和 If-Modified-Since\")])]),e._v(\" \"),v(\"p\",[v(\"code\",[e._v(\"Last-Modified\")]),e._v(\"表示本地文件最后修改日期，\"),v(\"code\",[e._v(\"If-Modified-Since\")]),e._v(\"会将\"),v(\"code\",[e._v(\"Last-Modified\")]),e._v(\"的值发送给服务器，询问服务器在该日期后资源是否有更新，有更新的话就会将新的资源发送回来（200），否则返回 304 状态码\")]),e._v(\" \"),v(\"blockquote\",[v(\"p\",[e._v(\"其实就是对比\"),v(\"code\",[e._v(\"If-Modified-Since\")]),e._v(\"与\"),v(\"code\",[e._v(\"Last-Modified\")]),e._v(\"的值是否一致，不一致则说明更新\")])]),e._v(\" \"),v(\"ul\",[v(\"li\",[e._v(\"ETag 和 If-None-Match\")])]),e._v(\" \"),v(\"p\",[e._v(\"原理与上面的相似，只不过它将时间换成了唯一标识\\n这样的话可以避免以下两个弊端：\")]),e._v(\" \"),v(\"ul\",[v(\"li\",[e._v(\"如果本地打开缓存文件，即使没有对文件进行修改，但还是会造成 Last-Modified 被修改，服务端不能命中缓存导致发送相同的资源\")]),e._v(\" \"),v(\"li\",[e._v(\"因为 Last-Modified 只能以秒计时，如果在不可感知的时间内修改完成文件，那么服务端会认为资源还是命中了，不会返回正确的资源\")])])])}),[],!1,null,null,null);t.default=i.exports}}]);","extractedComments":[]}