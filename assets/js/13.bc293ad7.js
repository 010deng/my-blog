(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{337:function(t,e,s){"use strict";s.r(e);var a=s(0),v=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"前言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),s("p",[t._v("在互联网较为普及的今天，越来越多的越来越多的资本往网络上迁移。只有能区分权限，我们才能对用户做更细粒度的定制，也能更加保障用户的安全。那么，今天我们主要站在web应用的角度，来阐述一下当前主流的几个鉴权方式。")]),t._v(" "),s("h2",{attrs:{id:"前置知识准备"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前置知识准备"}},[t._v("#")]),t._v(" 前置知识准备")]),t._v(" "),s("p",[t._v("在本文开始之前，咱们先普及几个概念，方便大家后面的阅读：")]),t._v(" "),s("h3",{attrs:{id:"鉴权"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#鉴权"}},[t._v("#")]),t._v(" 鉴权")]),t._v(" "),s("p",[t._v("鉴权（authentication）是指验证用户是否拥有访问系统的权利。它存在的目的就是对用户的权限进行划分，对应不同的权限享有不同的功能，而这恰恰也是一个系统与用户之间的双向保护。一个没有鉴权的系统，运营商无法得到利益保障，用户的信息安全也会受到威胁，所以鉴权对于一个系统是相当重要的一环。")]),t._v(" "),s("h3",{attrs:{id:"认证与授权"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#认证与授权"}},[t._v("#")]),t._v(" 认证与授权")]),t._v(" "),s("p",[t._v("认证的目的是认出用户是谁，授权的目的是决定用户能做什么")]),t._v(" "),s("h3",{attrs:{id:"同源策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#同源策略"}},[t._v("#")]),t._v(" 同源策略")]),t._v(" "),s("p",[t._v("相信做前端的同学，对这个概念一定不陌生。一些资源咱们不想让它访问的时候，它偏偏又可以访问，从而导致一些安全隐患；而一些资源，当咱们想访问的时候，又给咱报个大大的跨域。是不是特别想口吐芬芳？而其实造成上面现象的根本原因就是这个同源策略：同源策略是一个重要的安全策略，它用于限制一个origin的文档或者它加载的脚本如何能与另一个源的资源进行交互。它能帮助阻隔恶意文档，减少可能被攻击的媒介。")]),t._v(" "),s("blockquote",[s("p",[t._v("因为鉴权涉及的范围比较广，咱们这对范围进行一定的限制，后面不做特殊说明都为web系统的鉴权")])]),t._v(" "),s("h2",{attrs:{id:"常见的鉴权方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常见的鉴权方式"}},[t._v("#")]),t._v(" 常见的鉴权方式")]),t._v(" "),s("p",[t._v("好了，该说的说完了，该普及的也普及到了。本节我们来说一说常见的鉴权方式，主要有如下四种：")]),t._v(" "),s("h3",{attrs:{id:"http-basic-authentication"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http-basic-authentication"}},[t._v("#")]),t._v(" HTTP Basic Authentication")]),t._v(" "),s("p",[t._v("这种授权方式是浏览器遵守http协议实现的基本授权方式，HTTP协议进行通信的过程中，HTTP协议定义了基本认证允许HTTP服务器对客户端进行用户身份证的方法")]),t._v(" "),s("p",[t._v("服务器可以用来针对客户端的请求发送 challenge （质询信息），客户端则可以用来提供身份验证凭证。\n质询与应答的工作流程如下：（假设未授权）")]),t._v(" "),s("ol",[s("li",[t._v("由客户端发起HTTP请求")])]),t._v(" "),s("div",{staticClass:"language-http line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-http"}},[s("code",[t._v("Get /index.html HTTP/1.0 \n"),s("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Host:")]),t._v("www.google.com\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("ol",{attrs:{start:"2"}},[s("li",[t._v("服务器端向客户端返回 401（Unauthorized，未被授权的） 状态码，并在"),s("code",[t._v("WWW-Authenticate")]),t._v("首部提供如何进行验证的信息，其中至少包含有一种质询方式")])]),t._v(" "),s("div",{staticClass:"language-http line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-http"}},[s("code",[s("span",{pre:!0,attrs:{class:"token response-status"}},[t._v("HTTP/1.0 "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("401 Unauthorised ")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Server:")]),t._v(" SokEvo/1.0 \n"),s("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("WWW-Authenticate:")]),t._v(" Basic realm=”google.com” \n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("ol",{attrs:{start:"3"}},[s("li",[t._v("之后有意向证明自己身份的客户端可以在新的请求中添加 "),s("code",[t._v("Authorization")]),t._v(" 首部字段进行验证，字段值为身份验证凭证信息。通常客户端会弹出一个密码框让用户填写，然后发送包含有恰当的 Authorization  首部的请求")])]),t._v(" "),s("div",{staticClass:"language-http line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-http"}},[s("code",[t._v("Get /index.html HTTP/1.0 \n"),s("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Host:")]),t._v("www.google.com \n"),s("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Authorization:")]),t._v(" Basic xxx\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("ol",{attrs:{start:"4"}},[s("li",[t._v("服务器验证，并给出响应")]),t._v(" "),s("li",[t._v("如果验证通过，客户端下次请求将会是"),s("code",[t._v("200")])])]),t._v(" "),s("p",[t._v("认证过程：\n"),s("img",{attrs:{src:"/my-blog/httpAuth.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[s("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Authentication",target:"_blank",rel:"noopener noreferrer"}},[t._v("其他类似认证参考"),s("OutboundLink")],1)])]),t._v(" "),s("p",[t._v("优点：")]),t._v(" "),s("p",[t._v("基本认证的一个优点是基本上所有流行的网页浏览器都支持基本认证")]),t._v(" "),s("p",[t._v("缺点：")]),t._v(" "),s("p",[t._v("虽然基本认证非常容易实现，但该方案创建在以下的假设的基础上，即：客户端和服务器主机之间的连接是安全可信的。特别是，如果没有使用SSL/TLS这样的传输层安全的协议，那么以明文传输的密钥和口令很容易被拦截。该方案也同样没有对服务器返回的信息提供保护。")]),t._v(" "),s("p",[t._v("此外，现存的浏览器保存认证信息直到标签页或浏览器被关闭，或者用户清除历史记录。但是HTTP没有为服务器提供一种方法指示客户端丢弃这些被缓存的密钥。这意味着服务器端在用户不关闭浏览器的情况下，并没有一种有效的方法来让用户注销。")]),t._v(" "),s("h3",{attrs:{id:"session-cookie"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#session-cookie"}},[t._v("#")]),t._v(" session-cookie")]),t._v(" "),s("p",[t._v("这种鉴权方式十分常见，相信大家基本都见过或者是在项目中使用过，下面我们直接通过图片来给大家过一下：")]),t._v(" "),s("p",[t._v("在此之前，为了降低阅读门槛，咱们还是老规矩先解释一些http的知识：")]),t._v(" "),s("ul",[s("li",[t._v("cookie：Http协议是一个无状态的协议，cookie 就是一个标识客户端的人为状态，通常会自动带在请求中，用于标识当前用户")]),t._v(" "),s("li",[t._v("session：通常与"),s("code",[t._v("session-id")]),t._v("对应，存放在服务端，用于收到"),s("code",[t._v("session-id")]),t._v("时对应相关状态")]),t._v(" "),s("li",[t._v("session-id：存放在客户端")])]),t._v(" "),s("p",[s("img",{attrs:{src:"/my-blog/session.png",alt:"image"}})]),t._v(" "),s("p",[t._v("优点：")]),t._v(" "),s("p",[t._v("这个其实不用多说，基于cookie的方式自动将身份信息带在请求之中，其实是比较节省性能的一种方式；而且实现简单，有大量的工具可以使用")]),t._v(" "),s("p",[t._v("缺点：")]),t._v(" "),s("ol",[s("li",[t._v("早期的CSRF和XSS攻击，其实就是瞄准了cookie会自带在请求中的特性。而如果你将cookie-session作为唯一的鉴权方式，一旦你的cookie泄漏，其实身份信息就已经不受你的掌控了，安全风险较高。")]),t._v(" "),s("li",[t._v("认证方式局限于在浏览器中使用，cookie 是浏览器端的机制，如果在app端就无法使用 cookie。")]),t._v(" "),s("li",[t._v("为了满足全局一致性，我们最好把 session 存储在 redis 中做持久化，而在分布式环境下，我们可能需要在每个服务器上都备份，占用了大量的存储空间。")])]),t._v(" "),s("h3",{attrs:{id:"token"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#token"}},[t._v("#")]),t._v(" token")]),t._v(" "),s("p",[t._v("Token是一种令牌式的鉴权方式，和session-cookie最大的区别在于，服务端不再存储相应的用户状态，token中即包含了用户的信息。大致过程如下：")]),t._v(" "),s("ol",[s("li",[t._v("客户端请求登录")]),t._v(" "),s("li",[t._v("服务端收到请求，去验证用户名与密码")]),t._v(" "),s("li",[t._v("验证成功后，服务端会签发一个 Token，再把这个 Token 发送给客户端")]),t._v(" "),s("li",[t._v("客户端收到 Token 以后可以把它存储起来，比如放在 Cookie 里或者Local Storage 里")]),t._v(" "),s("li",[t._v("客户端每次向服务端请求资源的时候需要带着服务端签发的 Token")]),t._v(" "),s("li",[t._v("服务端收到请求，然后去验证客户端请求里面带着的 Token（request头部添加Authorization），如果验证成功，就向客户端返回请求的数据 ，如果不成功返回401错误码，鉴权失败。")])]),t._v(" "),s("p",[t._v("除此之外，token不局限于token的机制，以及服务端自定义校验的机制，使得token的扩展性极强，对一些CSRF攻击也有较好的防护")]),t._v(" "),s("blockquote",[s("p",[t._v("最常见的基于token的鉴权方案就是 jwt 了，由于其中涉及的内容比较多，准备下回单独开一篇文章讲讲")])]),t._v(" "),s("h2",{attrs:{id:"小程序鉴权"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小程序鉴权"}},[t._v("#")]),t._v(" 小程序鉴权")]),t._v(" "),s("h3",{attrs:{id:"小程序鉴权流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小程序鉴权流程"}},[t._v("#")]),t._v(" 小程序鉴权流程")]),t._v(" "),s("p",[t._v("下面我尽可能用通俗易懂的方式给大家讲讲小程序的鉴权流程：\n首先：咱们得在脑海中建立一个三方模型，客户端，服务端以及微信服务端。用户能操控的只有"),s("strong",[t._v("客户端")]),t._v("，开发者能操控的也只有"),s("strong",[t._v("本地")]),t._v("的"),s("strong",[t._v("服务端")]),t._v("，微信服务端是不受我们控制的，仅提供接口供本地"),s("strong",[t._v("服务端")]),t._v("调用。\n然后：我们想象自己刚薅到一张300元塞尔达优惠券的样子，假设咱就只有小程序哈，别杠！这时的我，迫不及待的打开了XX商城的小程序，飞快的搜索塞尔达，准备精准白嫖。然而意想不到的事情发生了，一个大白框展现在我们面前，并提醒我们授权自己的信息并登录。当我们点击确认的时候，其实就是触发了客户端的"),s("code",[t._v("wx.login()")]),t._v("接口，这个时候XX商城的前端程序员会得到一串用于标识我们身份的"),s("code",[t._v("code")]),t._v("，并将这串"),s("code",[t._v("code")]),t._v("发送给后台。这时候后台老哥，拿到咱们的"),s("code",[t._v("code")]),t._v("和小程序本身自带的一些信息（appid，appsecret等）去调用微信服务器提供的接口，换取"),s("code",[t._v("session_key,open_id")]),t._v("等信息。当然，这个信息虽然可以用于标识用户身份，但我们为了安全起见，常常将它们与一个自定义的登录态关联（token），并将token返回给前端。这个时候，用户就获取到了所谓的登录态。于是乎，我们顺利成章的白嫖了塞尔达。\n说明：鉴权不代表你每次都需要登录和授权，也不代表你授权一次就可以再也不用授权。所以说，如何对用户登录态进行保存，也是一门艺术。\n"),s("img",{attrs:{src:"/my-blog/api-login.2fcc9f35.jpg",alt:"image"}})])])}),[],!1,null,null,null);e.default=v.exports}}]);